AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Merchants Rest API
Parameters:
  AppName:
    Type: String
    Description: Application Name. Used for naming resources
Globals:
  Function:
    Timeout: 900
    MemorySize: 1024
    Layers:
    - Ref: LambdaLayer
    Environment:
      Variables:
        MERCHANTS_DDB_TABLE:
          Ref: MerchantsDDBTable
Resources:
  MerchantsDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AppName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: email
        AttributeType: S
      - AttributeName: storeName
        AttributeType: S
      KeySchema:
      - AttributeName: email
        KeyType: HASH
      - AttributeName: storeName
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: storeName-index
        KeySchema:
        - AttributeName: storeName
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName:
        Fn::Sub: ${AppName}-lambda-layer
      Description:
        Fn::Sub: ${AppName} Lambda Layer
      ContentUri: s3://merchants-details/4858c6658a212666a653583a3a522dd6
      CompatibleRuntimes:
      - nodejs12.x
      RetentionPolicy: Retain
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AppName}-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource:
            - '*'
      - PolicyName: ddbaccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:*
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MerchantsDDBTable}/*
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MerchantsDDBTable}
  GetData:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AppName}-get-data
      Handler: index.lambdaHandler
      Runtime: nodejs12.x
      Description: Get Merchants data from Dynamo DB
      CodeUri: s3://merchants-details/288bbdc285cd7ef35078263467e42e57
      Role:
        Fn::GetAtt: LambdaRole.Arn
  PutData:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AppName}-put-data
      Handler: index.lambdaHandler
      Runtime: nodejs12.x
      Description: Add Merchants data to Dynamo DB
      CodeUri: s3://merchants-details/3530b6554aa049265f5b997629a857b3
      Role:
        Fn::GetAtt: LambdaRole.Arn
Outputs:
  GetDataArn:
    Description: ARN of Get Data Lambda Function
    Value:
      Fn::GetAtt:
      - GetData
      - Arn
    Export:
      Name:
        Fn::Sub: ${AppName}-get-data-arn
  PutDataArn:
    Description: ARN of Put Data Lambda Function
    Value:
      Fn::GetAtt:
      - PutData
      - Arn
    Export:
      Name:
        Fn::Sub: ${AppName}-put-data-arn
